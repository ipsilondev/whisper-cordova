// RUN: hlo_to_llvm_ir %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = getelementptr inbounds i8, ptr %[[VAL_1:.*]], i64 0
// CHECK:         %[[VAL_2:.*]] = getelementptr inbounds i8, ptr %[[VAL_3:.*]], i64 0
// CHECK:         %[[VAL_4:.*]] = load i32, ptr @buffer_for_static, align 4
// CHECK:         %[[VAL_5:.*]] = load i32, ptr @buffer_for_dynamic, align 4
// CHECK:         %[[VAL_6:.*]] = load i32, ptr @buffer_for_static, align 4
// CHECK:         %[[VAL_7:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
// CHECK:         %[[VAL_8:.*]] = icmp eq i32 0, %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
// CHECK:         %[[VAL_10:.*]] = icmp eq i32 0, %[[VAL_9]]
// CHECK:         %[[VAL_11:.*]] = and i1 %[[VAL_8]], %[[VAL_10]]
// CHECK:         br i1 %[[VAL_11]], label %[[VAL_12:.*]], label %[[VAL_13:.*]]
// CHECK:       is_thread_0-after:                                ; preds = %[[VAL_12]], %[[VAL_14:.*]]
// CHECK:         %[[VAL_15:.*]] = mul i32 1, %[[VAL_4]]
// CHECK:         %[[VAL_16:.*]] = mul i32 %[[VAL_15]], %[[VAL_5]]
// CHECK:         %[[VAL_17:.*]] = mul i32 %[[VAL_16]], %[[VAL_6]]
// CHECK:         %[[VAL_18:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !2
// CHECK:         %[[VAL_19:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK:         %[[VAL_20:.*]] = mul nuw nsw i32 %[[VAL_18]], 8
// CHECK:         %[[VAL_21:.*]] = add nuw nsw i32 %[[VAL_20]], %[[VAL_19]]
// CHECK:         %[[VAL_22:.*]] = icmp ult i32 %[[VAL_21]], 8
// CHECK:         call void @llvm.assume(i1 %[[VAL_22]])
// CHECK:         %[[VAL_23:.*]] = udiv i32 %[[VAL_21]], 1
// CHECK:         %[[VAL_24:.*]] = urem i32 %[[VAL_23]], 2
// CHECK:         %[[VAL_25:.*]] = udiv i32 %[[VAL_21]], 2
// CHECK:         %[[VAL_26:.*]] = urem i32 %[[VAL_25]], 2
// CHECK:         %[[VAL_27:.*]] = udiv i32 %[[VAL_21]], 4
// CHECK:         %[[VAL_28:.*]] = icmp ult i32 %[[VAL_21]], 8
// CHECK:         br i1 %[[VAL_28]], label %[[VAL_29:.*]], label %[[VAL_30:.*]]
// CHECK:       custom_call.in_bounds-after:                      ; preds = %[[VAL_31:.*]], %[[VAL_13]]
// CHECK:         ret void
// CHECK:       is_thread_0-true:                                 ; preds = %[[VAL_14]]
// CHECK:         %[[VAL_32:.*]] = getelementptr inbounds i8, ptr %[[VAL_2]], i32 32
// CHECK:         store i32 %[[VAL_4]], ptr %[[VAL_32]], align 4
// CHECK:         %[[VAL_33:.*]] = getelementptr inbounds i8, ptr %[[VAL_2]], i32 36
// CHECK:         store i32 %[[VAL_5]], ptr %[[VAL_33]], align 4
// CHECK:         %[[VAL_34:.*]] = getelementptr inbounds i8, ptr %[[VAL_2]], i32 40
// CHECK:         store i32 %[[VAL_6]], ptr %[[VAL_34]], align 4
// CHECK:         br label %[[VAL_13]]
// CHECK:       custom_call.in_bounds-true:                       ; preds = %[[VAL_13]]
// CHECK:         %[[VAL_35:.*]] = mul nuw nsw i32 %[[VAL_24]], 1
// CHECK:         %[[VAL_36:.*]] = add nuw nsw i32 0, %[[VAL_35]]
// CHECK:         %[[VAL_37:.*]] = mul nuw nsw i32 %[[VAL_27]], 2
// CHECK:         %[[VAL_38:.*]] = add nuw nsw i32 %[[VAL_36]], %[[VAL_37]]
// CHECK:         %[[VAL_39:.*]] = mul nuw nsw i32 %[[VAL_26]], 4
// CHECK:         %[[VAL_40:.*]] = add nuw nsw i32 %[[VAL_38]], %[[VAL_39]]
// CHECK:         %[[VAL_41:.*]] = icmp ult i32 %[[VAL_40]], %[[VAL_17]]
// CHECK:         br i1 %[[VAL_41]], label %[[VAL_42:.*]], label %[[VAL_31]]
// CHECK:       custom_call.in_dyn_bounds-after:                  ; preds = %[[VAL_42]], %[[VAL_29]]
// CHECK:         br label %[[VAL_30]]
// CHECK:       custom_call.in_dyn_bounds-true:                   ; preds = %[[VAL_29]]
// CHECK:         %[[VAL_43:.*]] = udiv i32 %[[VAL_40]], 1
// CHECK:         %[[VAL_44:.*]] = urem i32 %[[VAL_43]], %[[VAL_6]]
// CHECK:         %[[VAL_45:.*]] = mul i32 1, %[[VAL_6]]
// CHECK:         %[[VAL_46:.*]] = udiv i32 %[[VAL_40]], %[[VAL_45]]
// CHECK:         %[[VAL_47:.*]] = urem i32 %[[VAL_46]], %[[VAL_4]]
// CHECK:         %[[VAL_48:.*]] = mul i32 %[[VAL_45]], %[[VAL_4]]
// CHECK:         %[[VAL_49:.*]] = udiv i32 %[[VAL_40]], %[[VAL_48]]
// CHECK:         %[[VAL_50:.*]] = getelementptr inbounds [2 x [2 x [2 x i32]]], ptr %[[VAL_0]], i32 0, i32 %[[VAL_49]], i32 %[[VAL_47]], i32 %[[VAL_44]]
// CHECK:         %[[VAL_51:.*]] = load i32, ptr %[[VAL_50]], align 4, !invariant.load !4
// CHECK:         %[[VAL_52:.*]] = getelementptr inbounds i32, ptr %[[VAL_2]], i32 %[[VAL_21]]
// CHECK:         store i32 %[[VAL_51]], ptr %[[VAL_52]], align 4
// CHECK:         br label %[[VAL_31]]


HloModule SliceToDynamic

ENTRY main {
  %param = s32[2,2,2]{2,0,1} parameter(0)
  %static = s32[] constant(2)
  %dynamic = s32[] constant(1)
  ROOT %custom-call = s32[2,<=2, 2]{2,0,1} custom-call(s32[2,2,2]{2,0,1} %param,
                                                  s32[] %static,
                                                  s32[] %dynamic,
                                                  s32[] %static),
                                      custom_call_target="SliceToDynamic",
                                      backend_config=""
}
