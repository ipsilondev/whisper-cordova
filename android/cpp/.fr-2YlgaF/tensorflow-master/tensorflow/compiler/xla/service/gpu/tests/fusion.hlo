// RUN: hlo_to_llvm_ir %s | FileCheck %s

HloModule TestModule

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = getelementptr inbounds i8, ptr %[[VAL_1:.*]], i64 0
// CHECK:         %[[VAL_2:.*]] = getelementptr inbounds i8, ptr %[[VAL_3:.*]], i64 0
// CHECK:         %[[VAL_4:.*]] = getelementptr inbounds i8, ptr %[[VAL_5:.*]], i64 0
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds i8, ptr %[[VAL_7:.*]], i64 0
// CHECK:         %[[VAL_8:.*]] = getelementptr inbounds i8, ptr %[[VAL_9:.*]], i64 0
// CHECK:         %[[VAL_10:.*]] = getelementptr inbounds i8, ptr %[[VAL_11:.*]], i64 0
// CHECK:         %[[VAL_12:.*]] = getelementptr inbounds i8, ptr %[[VAL_13:.*]], i64 0
// CHECK:         %[[VAL_14:.*]] = getelementptr inbounds i8, ptr %[[VAL_15:.*]], i64 0
// CHECK:         %[[VAL_16:.*]] = getelementptr inbounds i8, ptr %[[VAL_17:.*]], i64 0
// CHECK:         %[[VAL_18:.*]] = getelementptr inbounds i8, ptr %[[VAL_19:.*]], i64 0
// CHECK:         %[[VAL_20:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !2
// CHECK:         %[[VAL_21:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK:         %[[VAL_22:.*]] = mul nuw nsw i32 %[[VAL_20]], 256
// CHECK:         %[[VAL_23:.*]] = add nuw nsw i32 %[[VAL_22]], %[[VAL_21]]
// CHECK:         %[[VAL_24:.*]] = icmp ult i32 %[[VAL_23]], 25690112
// CHECK:         call void @llvm.assume(i1 %[[VAL_24]])
// CHECK:         %[[VAL_25:.*]] = mul nuw nsw i32 %[[VAL_23]], 4
// CHECK:         %[[VAL_26:.*]] = udiv i32 %[[VAL_25]], 1
// CHECK:         %[[VAL_27:.*]] = urem i32 %[[VAL_26]], 64
// CHECK:         %[[VAL_28:.*]] = udiv i32 %[[VAL_25]], 64
// CHECK:         %[[VAL_29:.*]] = urem i32 %[[VAL_28]], 112
// CHECK:         %[[VAL_30:.*]] = udiv i32 %[[VAL_25]], 7168
// CHECK:         %[[VAL_31:.*]] = urem i32 %[[VAL_30]], 112
// CHECK:         %[[VAL_32:.*]] = udiv i32 %[[VAL_25]], 802816
// CHECK:         %[[VAL_33:.*]] = add nuw nsw i32 %[[VAL_25]], 1
// CHECK:         %[[VAL_34:.*]] = udiv i32 %[[VAL_33]], 1
// CHECK:         %[[VAL_35:.*]] = urem i32 %[[VAL_34]], 64
// CHECK:         %[[VAL_36:.*]] = udiv i32 %[[VAL_33]], 64
// CHECK:         %[[VAL_37:.*]] = urem i32 %[[VAL_36]], 112
// CHECK:         %[[VAL_38:.*]] = udiv i32 %[[VAL_33]], 7168
// CHECK:         %[[VAL_39:.*]] = urem i32 %[[VAL_38]], 112
// CHECK:         %[[VAL_40:.*]] = udiv i32 %[[VAL_33]], 802816
// CHECK:         %[[VAL_41:.*]] = add nuw nsw i32 %[[VAL_25]], 2
// CHECK:         %[[VAL_42:.*]] = udiv i32 %[[VAL_41]], 1
// CHECK:         %[[VAL_43:.*]] = urem i32 %[[VAL_42]], 64
// CHECK:         %[[VAL_44:.*]] = udiv i32 %[[VAL_41]], 64
// CHECK:         %[[VAL_45:.*]] = urem i32 %[[VAL_44]], 112
// CHECK:         %[[VAL_46:.*]] = udiv i32 %[[VAL_41]], 7168
// CHECK:         %[[VAL_47:.*]] = urem i32 %[[VAL_46]], 112
// CHECK:         %[[VAL_48:.*]] = udiv i32 %[[VAL_41]], 802816
// CHECK:         %[[VAL_49:.*]] = add nuw nsw i32 %[[VAL_25]], 3
// CHECK:         %[[VAL_50:.*]] = udiv i32 %[[VAL_49]], 1
// CHECK:         %[[VAL_51:.*]] = urem i32 %[[VAL_50]], 64
// CHECK:         %[[VAL_52:.*]] = udiv i32 %[[VAL_49]], 64
// CHECK:         %[[VAL_53:.*]] = urem i32 %[[VAL_52]], 112
// CHECK:         %[[VAL_54:.*]] = udiv i32 %[[VAL_49]], 7168
// CHECK:         %[[VAL_55:.*]] = urem i32 %[[VAL_54]], 112
// CHECK:         %[[VAL_56:.*]] = udiv i32 %[[VAL_49]], 802816
// CHECK:         %[[VAL_57:.*]] = icmp ult i32 %[[VAL_25]], 102760448
// CHECK:         br i1 %[[VAL_57]], label %[[VAL_58:.*]], label %[[VAL_59:.*]]
// CHECK:       fusion_1.in_bounds-after:                         ; preds = %[[VAL_58]], %[[VAL_60:.*]]
// CHECK:         ret void
// CHECK:       fusion_1.in_bounds-true:                          ; preds = %[[VAL_60]]
// CHECK:         %[[VAL_61:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_8]], i32 0, i32 %[[VAL_27]]
// CHECK:         %[[VAL_62:.*]] = load float, ptr %[[VAL_61]], align 4, !invariant.load !4
// CHECK:         %[[VAL_63:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_6]], i32 0, i32 %[[VAL_27]]
// CHECK:         %[[VAL_64:.*]] = load float, ptr %[[VAL_63]], align 4, !invariant.load !4
// CHECK:         %[[VAL_65:.*]] = fmul float %[[VAL_62]], %[[VAL_64]]
// CHECK:         %[[VAL_66:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_67:.*]] = fmul float %[[VAL_65]], %[[VAL_66]]
// CHECK:         %[[VAL_68:.*]] = getelementptr inbounds half, ptr %[[VAL_16]], i32 %[[VAL_25]]
// CHECK:         %[[VAL_69:.*]] = load half, ptr %[[VAL_68]], align 2, !invariant.load !4
// CHECK:         %[[VAL_70:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_71:.*]] = fcmp ogt half %[[VAL_69]], %[[VAL_70]]
// CHECK:         %[[VAL_72:.*]] = zext i1 %[[VAL_71]] to i8
// CHECK:         %[[VAL_73:.*]] = getelementptr inbounds half, ptr %[[VAL_14]], i32 %[[VAL_25]]
// CHECK:         %[[VAL_74:.*]] = load half, ptr %[[VAL_73]], align 2, !invariant.load !4
// CHECK:         %[[VAL_75:.*]] = trunc i8 %[[VAL_72]] to i1
// CHECK:         %[[VAL_76:.*]] = select i1 %[[VAL_75]], half %[[VAL_74]], half %[[VAL_70]]
// CHECK:         %[[VAL_77:.*]] = fpext half %[[VAL_76]] to float
// CHECK:         %[[VAL_78:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_79:.*]] = fmul float %[[VAL_77]], %[[VAL_78]]
// CHECK:         %[[VAL_80:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_4]], i32 0, i32 %[[VAL_27]]
// CHECK:         %[[VAL_81:.*]] = load float, ptr %[[VAL_80]], align 4, !invariant.load !4
// CHECK:         %[[VAL_82:.*]] = fsub float %[[VAL_79]], %[[VAL_81]]
// CHECK:         %[[VAL_83:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_2]], i32 0, i32 %[[VAL_27]]
// CHECK:         %[[VAL_84:.*]] = load float, ptr %[[VAL_83]], align 4, !invariant.load !4
// CHECK:         %[[VAL_85:.*]] = getelementptr inbounds half, ptr %[[VAL_12]], i32 %[[VAL_25]]
// CHECK:         %[[VAL_86:.*]] = load half, ptr %[[VAL_85]], align 2, !invariant.load !4
// CHECK:         %[[VAL_87:.*]] = fpext half %[[VAL_86]] to float
// CHECK:         %[[VAL_88:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_10]], i32 0, i32 %[[VAL_27]]
// CHECK:         %[[VAL_89:.*]] = load float, ptr %[[VAL_88]], align 4, !invariant.load !4
// CHECK:         %[[VAL_90:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_91:.*]] = fmul float %[[VAL_89]], %[[VAL_90]]
// CHECK:         %[[VAL_92:.*]] = fsub float %[[VAL_87]], %[[VAL_91]]
// CHECK:         %[[VAL_93:.*]] = fmul float %[[VAL_84]], %[[VAL_92]]
// CHECK:         %[[VAL_94:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_0]], i32 0, i32 %[[VAL_27]]
// CHECK:         %[[VAL_95:.*]] = load float, ptr %[[VAL_94]], align 4, !invariant.load !4
// CHECK:         %[[VAL_96:.*]] = fdiv float %[[VAL_93]], %[[VAL_95]]
// CHECK:         %[[VAL_97:.*]] = fsub float %[[VAL_82]], %[[VAL_96]]
// CHECK:         %[[VAL_98:.*]] = fmul float %[[VAL_67]], %[[VAL_97]]
// CHECK:         %[[VAL_99:.*]] = fptrunc float %[[VAL_98]] to half
// CHECK:         %[[VAL_100:.*]] = getelementptr inbounds half, ptr %[[VAL_18]], i32 %[[VAL_25]]
// CHECK:         store half %[[VAL_99]], ptr %[[VAL_100]], align 2
// CHECK:         %[[VAL_101:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_8]], i32 0, i32 %[[VAL_35]]
// CHECK:         %[[VAL_102:.*]] = load float, ptr %[[VAL_101]], align 4, !invariant.load !4
// CHECK:         %[[VAL_103:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_6]], i32 0, i32 %[[VAL_35]]
// CHECK:         %[[VAL_104:.*]] = load float, ptr %[[VAL_103]], align 4, !invariant.load !4
// CHECK:         %[[VAL_105:.*]] = fmul float %[[VAL_102]], %[[VAL_104]]
// CHECK:         %[[VAL_106:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_107:.*]] = fmul float %[[VAL_105]], %[[VAL_106]]
// CHECK:         %[[VAL_108:.*]] = getelementptr inbounds half, ptr %[[VAL_16]], i32 %[[VAL_33]]
// CHECK:         %[[VAL_109:.*]] = load half, ptr %[[VAL_108]], align 2, !invariant.load !4
// CHECK:         %[[VAL_110:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_111:.*]] = fcmp ogt half %[[VAL_109]], %[[VAL_110]]
// CHECK:         %[[VAL_112:.*]] = zext i1 %[[VAL_111]] to i8
// CHECK:         %[[VAL_113:.*]] = getelementptr inbounds half, ptr %[[VAL_14]], i32 %[[VAL_33]]
// CHECK:         %[[VAL_114:.*]] = load half, ptr %[[VAL_113]], align 2, !invariant.load !4
// CHECK:         %[[VAL_115:.*]] = trunc i8 %[[VAL_112]] to i1
// CHECK:         %[[VAL_116:.*]] = select i1 %[[VAL_115]], half %[[VAL_114]], half %[[VAL_110]]
// CHECK:         %[[VAL_117:.*]] = fpext half %[[VAL_116]] to float
// CHECK:         %[[VAL_118:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_119:.*]] = fmul float %[[VAL_117]], %[[VAL_118]]
// CHECK:         %[[VAL_120:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_4]], i32 0, i32 %[[VAL_35]]
// CHECK:         %[[VAL_121:.*]] = load float, ptr %[[VAL_120]], align 4, !invariant.load !4
// CHECK:         %[[VAL_122:.*]] = fsub float %[[VAL_119]], %[[VAL_121]]
// CHECK:         %[[VAL_123:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_2]], i32 0, i32 %[[VAL_35]]
// CHECK:         %[[VAL_124:.*]] = load float, ptr %[[VAL_123]], align 4, !invariant.load !4
// CHECK:         %[[VAL_125:.*]] = getelementptr inbounds half, ptr %[[VAL_12]], i32 %[[VAL_33]]
// CHECK:         %[[VAL_126:.*]] = load half, ptr %[[VAL_125]], align 2, !invariant.load !4
// CHECK:         %[[VAL_127:.*]] = fpext half %[[VAL_126]] to float
// CHECK:         %[[VAL_128:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_10]], i32 0, i32 %[[VAL_35]]
// CHECK:         %[[VAL_129:.*]] = load float, ptr %[[VAL_128]], align 4, !invariant.load !4
// CHECK:         %[[VAL_130:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_131:.*]] = fmul float %[[VAL_129]], %[[VAL_130]]
// CHECK:         %[[VAL_132:.*]] = fsub float %[[VAL_127]], %[[VAL_131]]
// CHECK:         %[[VAL_133:.*]] = fmul float %[[VAL_124]], %[[VAL_132]]
// CHECK:         %[[VAL_134:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_0]], i32 0, i32 %[[VAL_35]]
// CHECK:         %[[VAL_135:.*]] = load float, ptr %[[VAL_134]], align 4, !invariant.load !4
// CHECK:         %[[VAL_136:.*]] = fdiv float %[[VAL_133]], %[[VAL_135]]
// CHECK:         %[[VAL_137:.*]] = fsub float %[[VAL_122]], %[[VAL_136]]
// CHECK:         %[[VAL_138:.*]] = fmul float %[[VAL_107]], %[[VAL_137]]
// CHECK:         %[[VAL_139:.*]] = fptrunc float %[[VAL_138]] to half
// CHECK:         %[[VAL_140:.*]] = getelementptr inbounds half, ptr %[[VAL_18]], i32 %[[VAL_33]]
// CHECK:         store half %[[VAL_139]], ptr %[[VAL_140]], align 2
// CHECK:         %[[VAL_141:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_8]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_142:.*]] = load float, ptr %[[VAL_141]], align 4, !invariant.load !4
// CHECK:         %[[VAL_143:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_6]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_144:.*]] = load float, ptr %[[VAL_143]], align 4, !invariant.load !4
// CHECK:         %[[VAL_145:.*]] = fmul float %[[VAL_142]], %[[VAL_144]]
// CHECK:         %[[VAL_146:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_147:.*]] = fmul float %[[VAL_145]], %[[VAL_146]]
// CHECK:         %[[VAL_148:.*]] = getelementptr inbounds half, ptr %[[VAL_16]], i32 %[[VAL_41]]
// CHECK:         %[[VAL_149:.*]] = load half, ptr %[[VAL_148]], align 2, !invariant.load !4
// CHECK:         %[[VAL_150:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_151:.*]] = fcmp ogt half %[[VAL_149]], %[[VAL_150]]
// CHECK:         %[[VAL_152:.*]] = zext i1 %[[VAL_151]] to i8
// CHECK:         %[[VAL_153:.*]] = getelementptr inbounds half, ptr %[[VAL_14]], i32 %[[VAL_41]]
// CHECK:         %[[VAL_154:.*]] = load half, ptr %[[VAL_153]], align 2, !invariant.load !4
// CHECK:         %[[VAL_155:.*]] = trunc i8 %[[VAL_152]] to i1
// CHECK:         %[[VAL_156:.*]] = select i1 %[[VAL_155]], half %[[VAL_154]], half %[[VAL_150]]
// CHECK:         %[[VAL_157:.*]] = fpext half %[[VAL_156]] to float
// CHECK:         %[[VAL_158:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_159:.*]] = fmul float %[[VAL_157]], %[[VAL_158]]
// CHECK:         %[[VAL_160:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_4]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_161:.*]] = load float, ptr %[[VAL_160]], align 4, !invariant.load !4
// CHECK:         %[[VAL_162:.*]] = fsub float %[[VAL_159]], %[[VAL_161]]
// CHECK:         %[[VAL_163:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_2]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_164:.*]] = load float, ptr %[[VAL_163]], align 4, !invariant.load !4
// CHECK:         %[[VAL_165:.*]] = getelementptr inbounds half, ptr %[[VAL_12]], i32 %[[VAL_41]]
// CHECK:         %[[VAL_166:.*]] = load half, ptr %[[VAL_165]], align 2, !invariant.load !4
// CHECK:         %[[VAL_167:.*]] = fpext half %[[VAL_166]] to float
// CHECK:         %[[VAL_168:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_10]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_169:.*]] = load float, ptr %[[VAL_168]], align 4, !invariant.load !4
// CHECK:         %[[VAL_170:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_171:.*]] = fmul float %[[VAL_169]], %[[VAL_170]]
// CHECK:         %[[VAL_172:.*]] = fsub float %[[VAL_167]], %[[VAL_171]]
// CHECK:         %[[VAL_173:.*]] = fmul float %[[VAL_164]], %[[VAL_172]]
// CHECK:         %[[VAL_174:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_0]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_175:.*]] = load float, ptr %[[VAL_174]], align 4, !invariant.load !4
// CHECK:         %[[VAL_176:.*]] = fdiv float %[[VAL_173]], %[[VAL_175]]
// CHECK:         %[[VAL_177:.*]] = fsub float %[[VAL_162]], %[[VAL_176]]
// CHECK:         %[[VAL_178:.*]] = fmul float %[[VAL_147]], %[[VAL_177]]
// CHECK:         %[[VAL_179:.*]] = fptrunc float %[[VAL_178]] to half
// CHECK:         %[[VAL_180:.*]] = getelementptr inbounds half, ptr %[[VAL_18]], i32 %[[VAL_41]]
// CHECK:         store half %[[VAL_179]], ptr %[[VAL_180]], align 2
// CHECK:         %[[VAL_181:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_8]], i32 0, i32 %[[VAL_51]]
// CHECK:         %[[VAL_182:.*]] = load float, ptr %[[VAL_181]], align 4, !invariant.load !4
// CHECK:         %[[VAL_183:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_6]], i32 0, i32 %[[VAL_51]]
// CHECK:         %[[VAL_184:.*]] = load float, ptr %[[VAL_183]], align 4, !invariant.load !4
// CHECK:         %[[VAL_185:.*]] = fmul float %[[VAL_182]], %[[VAL_184]]
// CHECK:         %[[VAL_186:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_187:.*]] = fmul float %[[VAL_185]], %[[VAL_186]]
// CHECK:         %[[VAL_188:.*]] = getelementptr inbounds half, ptr %[[VAL_16]], i32 %[[VAL_49]]
// CHECK:         %[[VAL_189:.*]] = load half, ptr %[[VAL_188]], align 2, !invariant.load !4
// CHECK:         %[[VAL_190:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_191:.*]] = fcmp ogt half %[[VAL_189]], %[[VAL_190]]
// CHECK:         %[[VAL_192:.*]] = zext i1 %[[VAL_191]] to i8
// CHECK:         %[[VAL_193:.*]] = getelementptr inbounds half, ptr %[[VAL_14]], i32 %[[VAL_49]]
// CHECK:         %[[VAL_194:.*]] = load half, ptr %[[VAL_193]], align 2, !invariant.load !4
// CHECK:         %[[VAL_195:.*]] = trunc i8 %[[VAL_192]] to i1
// CHECK:         %[[VAL_196:.*]] = select i1 %[[VAL_195]], half %[[VAL_194]], half %[[VAL_190]]
// CHECK:         %[[VAL_197:.*]] = fpext half %[[VAL_196]] to float
// CHECK:         %[[VAL_198:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_199:.*]] = fmul float %[[VAL_197]], %[[VAL_198]]
// CHECK:         %[[VAL_200:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_4]], i32 0, i32 %[[VAL_51]]
// CHECK:         %[[VAL_201:.*]] = load float, ptr %[[VAL_200]], align 4, !invariant.load !4
// CHECK:         %[[VAL_202:.*]] = fsub float %[[VAL_199]], %[[VAL_201]]
// CHECK:         %[[VAL_203:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_2]], i32 0, i32 %[[VAL_51]]
// CHECK:         %[[VAL_204:.*]] = load float, ptr %[[VAL_203]], align 4, !invariant.load !4
// CHECK:         %[[VAL_205:.*]] = getelementptr inbounds half, ptr %[[VAL_12]], i32 %[[VAL_49]]
// CHECK:         %[[VAL_206:.*]] = load half, ptr %[[VAL_205]], align 2, !invariant.load !4
// CHECK:         %[[VAL_207:.*]] = fpext half %[[VAL_206]] to float
// CHECK:         %[[VAL_208:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_10]], i32 0, i32 %[[VAL_51]]
// CHECK:         %[[VAL_209:.*]] = load float, ptr %[[VAL_208]], align 4, !invariant.load !4
// CHECK:         %[[VAL_210:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_211:.*]] = fmul float %[[VAL_209]], %[[VAL_210]]
// CHECK:         %[[VAL_212:.*]] = fsub float %[[VAL_207]], %[[VAL_211]]
// CHECK:         %[[VAL_213:.*]] = fmul float %[[VAL_204]], %[[VAL_212]]
// CHECK:         %[[VAL_214:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_0]], i32 0, i32 %[[VAL_51]]
// CHECK:         %[[VAL_215:.*]] = load float, ptr %[[VAL_214]], align 4, !invariant.load !4
// CHECK:         %[[VAL_216:.*]] = fdiv float %[[VAL_213]], %[[VAL_215]]
// CHECK:         %[[VAL_217:.*]] = fsub float %[[VAL_202]], %[[VAL_216]]
// CHECK:         %[[VAL_218:.*]] = fmul float %[[VAL_187]], %[[VAL_217]]
// CHECK:         %[[VAL_219:.*]] = fptrunc float %[[VAL_218]] to half
// CHECK:         %[[VAL_220:.*]] = getelementptr inbounds half, ptr %[[VAL_18]], i32 %[[VAL_49]]
// CHECK:         store half %[[VAL_219]], ptr %[[VAL_220]], align 2
// CHECK:         br label %[[VAL_59]]


%fused_computation.1 (param_0.5: f32[64], param_1.3088: f32[64], param_2.2116: f32[64], param_3.974: f32[64], param_4.1162: f32[64], param_5.893: f32[64], param_6.809: f16[128,64,112,112], param_7.770: f16[128,64,112,112], param_8.637: f16[128,64,112,112]) -> f16[128,64,112,112] {
  %param_4.1162 = f32[64]{0} parameter(4)
  %broadcast.2313 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_4.1162), dimensions={1}
  %param_3.974 = f32[64]{0} parameter(3)
  %broadcast.1844 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_3.974), dimensions={1}
  %multiply.1049 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %broadcast.2313, f32[128,64,112,112]{1,3,2,0} %broadcast.1844)
  %constant_1404 = f32[] constant(6.22807704e-07)
  %broadcast.1843 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[] %constant_1404), dimensions={}
  %multiply.1048 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %multiply.1049, f32[128,64,112,112]{1,3,2,0} %broadcast.1843)
  %param_8.637 = f16[128,64,112,112]{1,3,2,0} parameter(8)
  %constant_3626 = f16[] constant(0)
  %broadcast.4770 = f16[128,64,112,112]{1,3,2,0} broadcast(f16[] %constant_3626), dimensions={}
  %compare.259 = pred[128,64,112,112]{1,3,2,0} compare(f16[128,64,112,112]{1,3,2,0} %param_8.637, f16[128,64,112,112]{1,3,2,0} %broadcast.4770), direction=GT
  %param_7.770 = f16[128,64,112,112]{1,3,2,0} parameter(7)
  %select.254 = f16[128,64,112,112]{1,3,2,0} select(pred[128,64,112,112]{1,3,2,0} %compare.259, f16[128,64,112,112]{1,3,2,0} %param_7.770, f16[128,64,112,112]{1,3,2,0} %broadcast.4770)
  %convert.108 = f32[128,64,112,112]{1,3,2,0} convert(f16[128,64,112,112]{1,3,2,0} %select.254)
  %constant_1390 = f32[] constant(1605632)
  %broadcast.1841 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[] %constant_1390), dimensions={}
  %multiply.1046 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %convert.108, f32[128,64,112,112]{1,3,2,0} %broadcast.1841)
  %param_2.2116 = f32[64]{0} parameter(2)
  %broadcast.1840 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_2.2116), dimensions={1}
  %subtract.266 = f32[128,64,112,112]{1,3,2,0} subtract(f32[128,64,112,112]{1,3,2,0} %multiply.1046, f32[128,64,112,112]{1,3,2,0} %broadcast.1840)
  %param_1.3088 = f32[64]{0} parameter(1)
  %broadcast.1839 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_1.3088), dimensions={1}
  %param_6.809 = f16[128,64,112,112]{1,3,2,0} parameter(6)
  %convert.644 = f32[128,64,112,112]{1,3,2,0} convert(f16[128,64,112,112]{1,3,2,0} %param_6.809)
  %param_5.893 = f32[64]{0} parameter(5)
  %broadcast.3388 = f32[64]{0} broadcast(f32[] %constant_1404), dimensions={}
  %multiply.2336 = f32[64]{0} multiply(f32[64]{0} %param_5.893, f32[64]{0} %broadcast.3388)
  %broadcast.3387 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %multiply.2336), dimensions={1}
  %subtract.591 = f32[128,64,112,112]{1,3,2,0} subtract(f32[128,64,112,112]{1,3,2,0} %convert.644, f32[128,64,112,112]{1,3,2,0} %broadcast.3387)
  %multiply.1045 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %broadcast.1839, f32[128,64,112,112]{1,3,2,0} %subtract.591)
  %param_0.5 = f32[64]{0} parameter(0)
  %broadcast.1838 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_0.5), dimensions={1}
  %divide.212 = f32[128,64,112,112]{1,3,2,0} divide(f32[128,64,112,112]{1,3,2,0} %multiply.1045, f32[128,64,112,112]{1,3,2,0} %broadcast.1838)
  %subtract.265 = f32[128,64,112,112]{1,3,2,0} subtract(f32[128,64,112,112]{1,3,2,0} %subtract.266, f32[128,64,112,112]{1,3,2,0} %divide.212)
  %multiply.1044 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %multiply.1048, f32[128,64,112,112]{1,3,2,0} %subtract.265)
  ROOT %convert.107 = f16[128,64,112,112]{1,3,2,0} convert(f32[128,64,112,112]{1,3,2,0} %multiply.1044)
}

ENTRY main {
  %get-tuple-element.1532 = f32[64]{0} parameter(0)
  %get-tuple-element.876 = f32[64]{0} parameter(1)
  %get-tuple-element.877 = f32[64]{0} parameter(2)
  %get-tuple-element.1530 = f32[64]{0} parameter(3)
  %arg112.113 = f32[64]{0} parameter(4)
  %get-tuple-element.881 = f32[64]{0} parameter(5)
  %get-tuple-element.872 = f16[128,64,112,112]{1,3,2,0} parameter(6)
  %select-and-scatter.3626 = f16[128,64,112,112]{1,3,2,0} parameter(7)
  %fusion.845 = f16[128,64,112,112]{1,3,2,0} parameter(8)

  ROOT %fusion.1 = f16[128,64,112,112]{1,3,2,0} fusion(f32[64]{0} %get-tuple-element.1532, f32[64]{0} %get-tuple-element.876, f32[64]{0} %get-tuple-element.877, f32[64]{0} %get-tuple-element.1530, f32[64]{0} %arg112.113, f32[64]{0} %get-tuple-element.881, f16[128,64,112,112]{1,3,2,0} %get-tuple-element.872, f16[128,64,112,112]{1,3,2,0} %select-and-scatter.3626, f16[128,64,112,112]{1,3,2,0} %fusion.845), kind=kLoop, calls=%fused_computation.1
}
