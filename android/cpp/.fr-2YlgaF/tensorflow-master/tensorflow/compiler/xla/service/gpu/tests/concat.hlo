// RUN: hlo_to_llvm_ir %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = getelementptr inbounds i8, ptr %[[VAL_1:.*]], i64 0
// CHECK:         %[[VAL_2:.*]] = getelementptr inbounds i8, ptr %[[VAL_3:.*]], i64 0
// CHECK:         %[[VAL_4:.*]] = getelementptr inbounds i8, ptr %[[VAL_5:.*]], i64 0
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds i8, ptr %[[VAL_7:.*]], i64 0
// CHECK:         %[[VAL_8:.*]] = getelementptr inbounds i8, ptr %[[VAL_9:.*]], i64 0
// CHECK:         %[[VAL_10:.*]] = getelementptr inbounds i8, ptr %[[VAL_11:.*]], i64 0
// CHECK:         %[[VAL_12:.*]] = getelementptr inbounds i8, ptr %[[VAL_13:.*]], i64 0
// CHECK:         %[[VAL_14:.*]] = getelementptr inbounds i8, ptr %[[VAL_15:.*]], i64 0
// CHECK:         %[[VAL_16:.*]] = getelementptr inbounds i8, ptr %[[VAL_17:.*]], i64 0
// CHECK:         %[[VAL_18:.*]] = getelementptr inbounds i8, ptr %[[VAL_19:.*]], i64 0
// CHECK:         %[[VAL_20:.*]] = getelementptr inbounds i8, ptr %[[VAL_21:.*]], i64 0
// CHECK:         %[[VAL_22:.*]] = getelementptr inbounds i8, ptr %[[VAL_23:.*]], i64 0
// CHECK:         %[[VAL_24:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !2
// CHECK:         %[[VAL_25:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK:         %[[VAL_26:.*]] = mul nuw nsw i32 %[[VAL_24]], 1024
// CHECK:         %[[VAL_27:.*]] = add nuw nsw i32 %[[VAL_26]], %[[VAL_25]]
// CHECK:         %[[VAL_28:.*]] = icmp ult i32 %[[VAL_27]], 11264
// CHECK:         call void @llvm.assume(i1 %[[VAL_28]])
// CHECK:         %[[VAL_29:.*]] = udiv i32 %[[VAL_27]], 1
// CHECK:         %[[VAL_30:.*]] = icmp ult i32 %[[VAL_27]], 11000
// CHECK:         br i1 %[[VAL_30]], label %[[VAL_31:.*]], label %[[VAL_32:.*]]
// CHECK:       fusion.in_bounds-after:                           ; preds = %[[VAL_33:.*]], %[[VAL_34:.*]]
// CHECK:         ret void
// CHECK:       fusion.in_bounds-true:                            ; preds = %[[VAL_34]]
// CHECK:         br label %[[VAL_35:.*]]
// CHECK:       concat_index_from_operand_id0:                    ; preds = %[[VAL_36:.*]]
// CHECK:         %[[VAL_37:.*]] = phi i32 [ 0, %[[VAL_36]] ]
// CHECK:         %[[VAL_38:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_37]]
// CHECK:         %[[VAL_39:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_20]], i32 0, i32 %[[VAL_38]]
// CHECK:         %[[VAL_40:.*]] = load float, ptr %[[VAL_39]], align 4, !invariant.load !4
// CHECK:         %[[VAL_41:.*]] = fptrunc float %[[VAL_40]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id1:                    ; preds = %[[VAL_42:.*]]
// CHECK:         %[[VAL_43:.*]] = phi i32 [ 1000, %[[VAL_42]] ]
// CHECK:         %[[VAL_44:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_43]]
// CHECK:         %[[VAL_45:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_18]], i32 0, i32 %[[VAL_44]]
// CHECK:         %[[VAL_46:.*]] = load float, ptr %[[VAL_45]], align 4, !invariant.load !4
// CHECK:         %[[VAL_47:.*]] = fptrunc float %[[VAL_46]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id2:                    ; preds = %[[VAL_48:.*]]
// CHECK:         %[[VAL_49:.*]] = phi i32 [ 2000, %[[VAL_48]] ]
// CHECK:         %[[VAL_50:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_49]]
// CHECK:         %[[VAL_51:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_16]], i32 0, i32 %[[VAL_50]]
// CHECK:         %[[VAL_52:.*]] = load float, ptr %[[VAL_51]], align 4, !invariant.load !4
// CHECK:         %[[VAL_53:.*]] = fptrunc float %[[VAL_52]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id3:                    ; preds = %[[VAL_54:.*]]
// CHECK:         %[[VAL_55:.*]] = phi i32 [ 3000, %[[VAL_54]] ]
// CHECK:         %[[VAL_56:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_55]]
// CHECK:         %[[VAL_57:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_14]], i32 0, i32 %[[VAL_56]]
// CHECK:         %[[VAL_58:.*]] = load float, ptr %[[VAL_57]], align 4, !invariant.load !4
// CHECK:         %[[VAL_59:.*]] = fptrunc float %[[VAL_58]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id4:                    ; preds = %[[VAL_60:.*]]
// CHECK:         %[[VAL_61:.*]] = phi i32 [ 4000, %[[VAL_60]] ]
// CHECK:         %[[VAL_62:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_61]]
// CHECK:         %[[VAL_63:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_12]], i32 0, i32 %[[VAL_62]]
// CHECK:         %[[VAL_64:.*]] = load float, ptr %[[VAL_63]], align 4, !invariant.load !4
// CHECK:         %[[VAL_65:.*]] = fptrunc float %[[VAL_64]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id5:                    ; preds = %[[VAL_66:.*]]
// CHECK:         %[[VAL_67:.*]] = phi i32 [ 5000, %[[VAL_66]] ]
// CHECK:         %[[VAL_68:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_67]]
// CHECK:         %[[VAL_69:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_10]], i32 0, i32 %[[VAL_68]]
// CHECK:         %[[VAL_70:.*]] = load float, ptr %[[VAL_69]], align 4, !invariant.load !4
// CHECK:         %[[VAL_71:.*]] = fptrunc float %[[VAL_70]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id6:                    ; preds = %[[VAL_72:.*]]
// CHECK:         %[[VAL_73:.*]] = phi i32 [ 6000, %[[VAL_72]] ]
// CHECK:         %[[VAL_74:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_73]]
// CHECK:         %[[VAL_75:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_8]], i32 0, i32 %[[VAL_74]]
// CHECK:         %[[VAL_76:.*]] = load float, ptr %[[VAL_75]], align 4, !invariant.load !4
// CHECK:         %[[VAL_77:.*]] = fptrunc float %[[VAL_76]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id7:                    ; preds = %[[VAL_78:.*]]
// CHECK:         %[[VAL_79:.*]] = phi i32 [ 7000, %[[VAL_78]] ]
// CHECK:         %[[VAL_80:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_79]]
// CHECK:         %[[VAL_81:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_6]], i32 0, i32 %[[VAL_80]]
// CHECK:         %[[VAL_82:.*]] = load float, ptr %[[VAL_81]], align 4, !invariant.load !4
// CHECK:         %[[VAL_83:.*]] = fptrunc float %[[VAL_82]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id8:                    ; preds = %[[VAL_84:.*]]
// CHECK:         %[[VAL_85:.*]] = phi i32 [ 8000, %[[VAL_84]] ]
// CHECK:         %[[VAL_86:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_85]]
// CHECK:         %[[VAL_87:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_4]], i32 0, i32 %[[VAL_86]]
// CHECK:         %[[VAL_88:.*]] = load float, ptr %[[VAL_87]], align 4, !invariant.load !4
// CHECK:         %[[VAL_89:.*]] = fptrunc float %[[VAL_88]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id9:                    ; preds = %[[VAL_90:.*]]
// CHECK:         %[[VAL_91:.*]] = phi i32 [ 9000, %[[VAL_90]] ]
// CHECK:         %[[VAL_92:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_91]]
// CHECK:         %[[VAL_93:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_2]], i32 0, i32 %[[VAL_92]]
// CHECK:         %[[VAL_94:.*]] = load float, ptr %[[VAL_93]], align 4, !invariant.load !4
// CHECK:         %[[VAL_95:.*]] = fptrunc float %[[VAL_94]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concat_index_from_operand_id10:                   ; preds = %[[VAL_96:.*]]
// CHECK:         %[[VAL_97:.*]] = phi i32 [ 10000, %[[VAL_96]] ]
// CHECK:         %[[VAL_98:.*]] = sub nsw i32 %[[VAL_29]], %[[VAL_97]]
// CHECK:         %[[VAL_99:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_0]], i32 0, i32 %[[VAL_98]]
// CHECK:         %[[VAL_100:.*]] = load float, ptr %[[VAL_99]], align 4, !invariant.load !4
// CHECK:         %[[VAL_101:.*]] = fptrunc float %[[VAL_100]] to half
// CHECK:         br label %[[VAL_33]]
// CHECK:       concatenate.pivot.5000.:                          ; preds = %[[VAL_31]]
// CHECK:         %[[VAL_102:.*]] = icmp ult i32 %[[VAL_29]], 5000
// CHECK:         br i1 %[[VAL_102]], label %[[VAL_103:.*]], label %[[VAL_104:.*]]
// CHECK:       concatenate.pivot.2000.:                          ; preds = %[[VAL_35]]
// CHECK:         %[[VAL_105:.*]] = icmp ult i32 %[[VAL_29]], 2000
// CHECK:         br i1 %[[VAL_105]], label %[[VAL_106:.*]], label %[[VAL_107:.*]]
// CHECK:       concatenate.pivot.1000.:                          ; preds = %[[VAL_103]]
// CHECK:         %[[VAL_108:.*]] = icmp ult i32 %[[VAL_29]], 1000
// CHECK:         br i1 %[[VAL_108]], label %[[VAL_36]], label %[[VAL_42]]
// CHECK:       concatenate.pivot.0.:                             ; preds = %[[VAL_106]]
// CHECK:         br label %[[VAL_109:.*]]
// CHECK:       concatenate.pivot.1000.1:                         ; preds = %[[VAL_106]]
// CHECK:         br label %[[VAL_110:.*]]
// CHECK:       concatenate.pivot.3000.:                          ; preds = %[[VAL_103]]
// CHECK:         %[[VAL_111:.*]] = icmp ult i32 %[[VAL_29]], 3000
// CHECK:         br i1 %[[VAL_111]], label %[[VAL_48]], label %[[VAL_112:.*]]
// CHECK:       concatenate.pivot.2000.2:                         ; preds = %[[VAL_107]]
// CHECK:         br label %[[VAL_113:.*]]
// CHECK:       concatenate.pivot.4000.:                          ; preds = %[[VAL_107]]
// CHECK:         %[[VAL_114:.*]] = icmp ult i32 %[[VAL_29]], 4000
// CHECK:         br i1 %[[VAL_114]], label %[[VAL_54]], label %[[VAL_60]]
// CHECK:       concatenate.pivot.3000.3:                         ; preds = %[[VAL_112]]
// CHECK:         br label %[[VAL_115:.*]]
// CHECK:       concatenate.pivot.4000.4:                         ; preds = %[[VAL_112]]
// CHECK:         br label %[[VAL_116:.*]]
// CHECK:       concatenate.pivot.8000.:                          ; preds = %[[VAL_35]]
// CHECK:         %[[VAL_117:.*]] = icmp ult i32 %[[VAL_29]], 8000
// CHECK:         br i1 %[[VAL_117]], label %[[VAL_118:.*]], label %[[VAL_119:.*]]
// CHECK:       concatenate.pivot.6000.:                          ; preds = %[[VAL_104]]
// CHECK:         %[[VAL_120:.*]] = icmp ult i32 %[[VAL_29]], 6000
// CHECK:         br i1 %[[VAL_120]], label %[[VAL_66]], label %[[VAL_121:.*]]
// CHECK:       concatenate.pivot.5000.5:                         ; preds = %[[VAL_118]]
// CHECK:         br label %[[VAL_122:.*]]
// CHECK:       concatenate.pivot.7000.:                          ; preds = %[[VAL_118]]
// CHECK:         %[[VAL_123:.*]] = icmp ult i32 %[[VAL_29]], 7000
// CHECK:         br i1 %[[VAL_123]], label %[[VAL_72]], label %[[VAL_78]]
// CHECK:       concatenate.pivot.6000.6:                         ; preds = %[[VAL_121]]
// CHECK:         br label %[[VAL_124:.*]]
// CHECK:       concatenate.pivot.7000.7:                         ; preds = %[[VAL_121]]
// CHECK:         br label %[[VAL_125:.*]]
// CHECK:       concatenate.pivot.9000.:                          ; preds = %[[VAL_104]]
// CHECK:         %[[VAL_126:.*]] = icmp ult i32 %[[VAL_29]], 9000
// CHECK:         br i1 %[[VAL_126]], label %[[VAL_84]], label %[[VAL_127:.*]]
// CHECK:       concatenate.pivot.8000.8:                         ; preds = %[[VAL_119]]
// CHECK:         br label %[[VAL_128:.*]]
// CHECK:       concatenate.pivot.10000.:                         ; preds = %[[VAL_119]]
// CHECK:         %[[VAL_129:.*]] = icmp ult i32 %[[VAL_29]], 10000
// CHECK:         br i1 %[[VAL_129]], label %[[VAL_90]], label %[[VAL_96]]
// CHECK:       concatenate.pivot.9000.9:                         ; preds = %[[VAL_127]]
// CHECK:         br label %[[VAL_130:.*]]
// CHECK:       concatenate.pivot.10000.10:                       ; preds = %[[VAL_127]]
// CHECK:         br label %[[VAL_131:.*]]
// CHECK:       concatenate.23.merge:                             ; preds = %[[VAL_131]], %[[VAL_130]], %[[VAL_128]], %[[VAL_125]], %[[VAL_124]], %[[VAL_122]], %[[VAL_116]], %[[VAL_115]], %[[VAL_113]], %[[VAL_110]], %[[VAL_109]]
// CHECK:         %[[VAL_132:.*]] = phi half [ %[[VAL_41]], %[[VAL_109]] ], [ %[[VAL_47]], %[[VAL_110]] ], [ %[[VAL_53]], %[[VAL_113]] ], [ %[[VAL_59]], %[[VAL_115]] ], [ %[[VAL_65]], %[[VAL_116]] ], [ %[[VAL_71]], %[[VAL_122]] ], [ %[[VAL_77]], %[[VAL_124]] ], [ %[[VAL_83]], %[[VAL_125]] ], [ %[[VAL_89]], %[[VAL_128]] ], [ %[[VAL_95]], %[[VAL_130]] ], [ %[[VAL_101]], %[[VAL_131]] ]
// CHECK:         %[[VAL_133:.*]] = getelementptr inbounds half, ptr %[[VAL_22]], i32 %[[VAL_27]]
// CHECK:         store half %[[VAL_132]], ptr %[[VAL_133]], align 2
// CHECK:         br label %[[VAL_32]]

HloModule module

%fused_computation (param_0.1: f32[1000], param_1.2: f32[1000], param_2.3: f32[1000], param_3.4: f32[1000], param_4.5: f32[1000], param_5.6: f32[1000], param_6.7: f32[1000], param_7.8: f32[1000], param_8.9: f32[1000], param_9.10: f32[1000], param_10.11: f32[1000]) -> f16[11000] {
  %param_10.11 = f32[1000]{0} parameter(10)
  %converted0.1 = f16[1000]{0} convert(f32[1000]{0} %param_10.11)
  %param_9.10 = f32[1000]{0} parameter(9)
  %converted1.1 = f16[1000]{0} convert(f32[1000]{0} %param_9.10)
  %param_8.9 = f32[1000]{0} parameter(8)
  %converted2.1 = f16[1000]{0} convert(f32[1000]{0} %param_8.9)
  %param_7.8 = f32[1000]{0} parameter(7)
  %converted3.1 = f16[1000]{0} convert(f32[1000]{0} %param_7.8)
  %param_6.7 = f32[1000]{0} parameter(6)
  %converted4.1 = f16[1000]{0} convert(f32[1000]{0} %param_6.7)
  %param_5.6 = f32[1000]{0} parameter(5)
  %converted5.1 = f16[1000]{0} convert(f32[1000]{0} %param_5.6)
  %param_4.5 = f32[1000]{0} parameter(4)
  %converted6.1 = f16[1000]{0} convert(f32[1000]{0} %param_4.5)
  %param_3.4 = f32[1000]{0} parameter(3)
  %converted7.1 = f16[1000]{0} convert(f32[1000]{0} %param_3.4)
  %param_2.3 = f32[1000]{0} parameter(2)
  %converted8.1 = f16[1000]{0} convert(f32[1000]{0} %param_2.3)
  %param_1.2 = f32[1000]{0} parameter(1)
  %converted9.1 = f16[1000]{0} convert(f32[1000]{0} %param_1.2)
  %param_0.1 = f32[1000]{0} parameter(0)
  %converted10.1 = f16[1000]{0} convert(f32[1000]{0} %param_0.1)
  ROOT %out.1 = f16[11000]{0} concatenate(f16[1000]{0} %converted0.1, f16[1000]{0} %converted1.1, f16[1000]{0} %converted2.1, f16[1000]{0} %converted3.1, f16[1000]{0} %converted4.1, /*index=5*/f16[1000]{0} %converted5.1, f16[1000]{0} %converted6.1, f16[1000]{0} %converted7.1, f16[1000]{0} %converted8.1, f16[1000]{0} %converted9.1, /*index=10*/f16[1000]{0} %converted10.1), dimensions={0}
}

ENTRY %computation (p0: f32[1000], p1: f32[1000], p2: f32[1000], p3: f32[1000], p4: f32[1000], p5: f32[1000], p6: f32[1000], p7: f32[1000], p8: f32[1000], p9: f32[1000], p10: f32[1000]) -> f16[11000] {
  %p10 = f32[1000]{0} parameter(10)
  %p9 = f32[1000]{0} parameter(9)
  %p8 = f32[1000]{0} parameter(8)
  %p7 = f32[1000]{0} parameter(7)
  %p6 = f32[1000]{0} parameter(6)
  %p5 = f32[1000]{0} parameter(5)
  %p4 = f32[1000]{0} parameter(4)
  %p3 = f32[1000]{0} parameter(3)
  %p2 = f32[1000]{0} parameter(2)
  %p1 = f32[1000]{0} parameter(1)
  %p0 = f32[1000]{0} parameter(0)
  ROOT %fusion = f16[11000]{0} fusion(f32[1000]{0} %p10, f32[1000]{0} %p9, f32[1000]{0} %p8, f32[1000]{0} %p7, f32[1000]{0} %p6, /*index=5*/f32[1000]{0} %p5, f32[1000]{0} %p4, f32[1000]{0} %p3, f32[1000]{0} %p2, f32[1000]{0} %p1, /*index=10*/f32[1000]{0} %p0), kind=kLoop, calls=%fused_computation
}

